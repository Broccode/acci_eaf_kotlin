name: ACCI EAF CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Global settings for retry logic on failures
env:
  RETRY_ATTEMPTS: 3
  RETRY_DELAY: 10

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-disabled: false
          
      - name: Generate Build Version
        id: build-version
        run: |
          if [[ $(git tag --points-at HEAD) != "" ]]; then
            VERSION=$(git tag --points-at HEAD | sort -V | tail -n 1)
          else
            GIT_DESCRIBE=$(git describe --tags --always --dirty)
            VERSION="dev-${GIT_DESCRIBE}-${GITHUB_RUN_NUMBER:-local}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"
          
      - name: Check Gradle wrapper
        run: |
          ls -la ./gradle/wrapper/
          ls -la ./gradlew
          
      - name: Ensure gradlew is executable
        run: chmod +x ./gradlew
        
      - name: Build, Test and Run Quality Checks
        id: gradle-build
        continue-on-error: true
        run: |
          attempt=1
          max_attempts=$RETRY_ATTEMPTS
          retry_delay=$RETRY_DELAY
          
          while [ $attempt -le $max_attempts ]; do
            echo "::group::Build attempt $attempt of $max_attempts"
            if ./gradlew build cleanCheck --info --stacktrace; then
              echo "::endgroup::"
              echo "Build succeeded on attempt $attempt"
              exit 0
            else
              echo "::endgroup::"
              build_exit_code=$?
              if [ $attempt -eq $max_attempts ]; then
                echo "All $max_attempts build attempts failed"
                exit $build_exit_code
              else
                attempt=$((attempt+1))
                echo "Build failed with exit code $build_exit_code. Retrying in $retry_delay seconds..."
                sleep $retry_delay
              fi
            fi
          done
        
      - name: Generate Build Manifest
        run: |
          mkdir -p build/artifacts
          cat > build/artifacts/build-manifest.json << EOF
          {
            "version": "${{ env.VERSION }}",
            "buildTimestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "gitCommit": "${{ github.sha }}",
            "gitBranch": "${{ github.ref_name }}",
            "buildNumber": "${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          cat build/artifacts/build-manifest.json
          
      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            eaf-core/build/libs/*.jar
            build/artifacts/build-manifest.json
          retention-days: 7
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Build and Push Docker Image for eaf-core
        id: docker-build
        continue-on-error: true
        run: |
          attempt=1
          max_attempts=$RETRY_ATTEMPTS
          retry_delay=$RETRY_DELAY
          
          # Debug the Docker build context
          echo "Checking Docker build context:"
          ls -la
          echo "Contents of gradle wrapper directory:"
          ls -la ./gradle/wrapper/
          
          while [ $attempt -le $max_attempts ]; do
            echo "::group::Docker build/push attempt $attempt of $max_attempts"
            if docker buildx build \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              -f ./eaf-core/Dockerfile \
              -t ${{ secrets.DOCKERHUB_REPONAME }}/eaf-core:${{ env.VERSION }} \
              -t ${{ secrets.DOCKERHUB_REPONAME }}/eaf-core:latest \
              --progress=plain \
              .; then
              echo "::endgroup::"
              echo "Docker build succeeded on attempt $attempt"
              exit 0
            else
              echo "::endgroup::"
              docker_exit_code=$?
              if [ $attempt -eq $max_attempts ]; then
                echo "All $max_attempts Docker build attempts failed"
                exit $docker_exit_code
              else
                attempt=$((attempt+1))
                echo "Docker build failed with exit code $docker_exit_code. Retrying in $retry_delay seconds..."
                sleep $retry_delay
              fi
            fi
          done
          
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        continue-on-error: true
        run: |
          attempt=1
          max_attempts=$RETRY_ATTEMPTS
          retry_delay=$RETRY_DELAY
          
          # Ensure the trivy-results.sarif file exists even if scan fails
          touch trivy-results.sarif
          
          while [ $attempt -le $max_attempts ]; do
            echo "::group::Trivy scan attempt $attempt of $max_attempts"
            
            # Install Trivy if not present
            if ! command -v trivy &> /dev/null; then
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            fi
            
            if trivy image \
              --format sarif \
              --output trivy-results.sarif \
              --severity CRITICAL,HIGH \
              --exit-code 1 \
              '${{ secrets.DOCKERHUB_REPONAME }}/eaf-core:${{ env.VERSION }}'; then
              echo "::endgroup::"
              echo "Trivy scan succeeded on attempt $attempt"
              exit 0
            else
              echo "::endgroup::"
              trivy_exit_code=$?
              # Exit code 2 means vulnerabilities found (expected outcome if critical issues exist)
              if [ $trivy_exit_code -eq 2 ]; then
                echo "Vulnerabilities found (exit code 2) - failing as expected"
                exit 2
              fi
              
              if [ $attempt -eq $max_attempts ]; then
                echo "All $max_attempts Trivy scan attempts failed"
                exit $trivy_exit_code
              else
                attempt=$((attempt+1))
                echo "Trivy scan failed with exit code $trivy_exit_code. Retrying in $retry_delay seconds..."
                sleep $retry_delay
              fi
            fi
          done
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (steps.trivy-scan.outcome == 'success' || steps.trivy-scan.outcome == 'failure')
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7
          
      - name: Archive Quality Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-check-results
          path: |
            **/build/reports/detekt/
            **/build/reports/ktlint/
          retention-days: 7
